GAS LISTING /tmp/cc1Hd0nS.s 			page 1


   1               		.file	"tlc.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.stabs	"/home/j/projects/glowscape/avr/glowscape/",100,0,2,.Ltext0
  10               		.stabs	"tlc.c",100,0,2,.Ltext0
  11               		.text
  12               	.Ltext0:
  13               		.stabs	"gcc2_compiled.",60,0,0,0
  14               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  15               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  16               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  17               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  18               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  19               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  20               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"void:t(0,15)=(0,15)",128,0,0,0
  29               		.stabs	"tlc.h",130,0,0,0
  30               		.stabs	"main.h",130,0,0,0
  31               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/inttypes.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.6.2/include/stdint.h",130,0,0,0
  33               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h",130,0,0,0
  34               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  35               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  36               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  37               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  38               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  39               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  40               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  41               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  42               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  43               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  44               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  45               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  46               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  47               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  48               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  49               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  50               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  51               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  52               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  53               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  54               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  55               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  56               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  57               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
GAS LISTING /tmp/cc1Hd0nS.s 			page 2


  58               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  59               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  60               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  61               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  62               		.stabn	162,0,0,0
  63               		.stabn	162,0,0,0
  64               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  65               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h",130,0,0,0
  68               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/avr/fuse.h",130,0,0,0
  69               		.stabs	"__fuse_t:t(7,1)=(7,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
  70               		.stabn	162,0,0,0
  71               		.stabn	162,0,0,0
  72               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/avr/pgmspace.h",130,0,0,0
  73               		.stabs	"/usr/lib/gcc/avr/4.6.2/include/stddef.h",130,0,0,0
  74               		.stabs	"size_t:t(9,1)=(0,4)",128,0,212,0
  75               		.stabn	162,0,0,0
  76               		.stabs	"prog_void:t(8,1)=(8,2)=(8,2)",128,0,217,0
  77               		.stabs	"prog_char:t(8,3)=(8,4)=@s8;r(8,4);0;255;",128,0,218,0
  78               		.stabs	"prog_uchar:t(8,5)=(8,6)=@s8;r(8,6);0;255;",128,0,219,0
  79               		.stabs	"prog_int8_t:t(8,7)=(8,8)=(0,10)",128,0,221,0
  80               		.stabs	"prog_uint8_t:t(8,9)=(8,10)=(0,11)",128,0,222,0
  81               		.stabs	"prog_int16_t:t(8,11)=(8,12)=(0,1)",128,0,223,0
  82               		.stabs	"prog_uint16_t:t(8,13)=(8,14)=(0,4)",128,0,224,0
  83               		.stabs	"prog_int32_t:t(8,15)=(8,16)=(0,3)",128,0,225,0
  84               		.stabs	"prog_uint32_t:t(8,17)=(8,18)=(0,5)",128,0,226,0
  85               		.stabs	"prog_int64_t:t(8,19)=(8,20)=(0,6)",128,0,228,0
  86               		.stabs	"prog_uint64_t:t(8,21)=(8,22)=(0,7)",128,0,229,0
  87               		.stabn	162,0,0,0
  88               		.stabn	162,0,0,0
  89               		.stabn	162,0,0,0
  90               		.stabs	"tlc_init:F(0,15)",36,0,12,tlc_init
  91               	.global	tlc_init
  92               		.type	tlc_init, @function
  93               	tlc_init:
  94               		.stabd	46,0,0
   1:tlc.c         **** /* A C R I S   P R O J E C T ********
   2:tlc.c         ****  * LED Controller                   *
   3:tlc.c         ****  * http://jwcxz.com/projects/acris  *
   4:tlc.c         ****  *                                  *
   5:tlc.c         ****  * J. Colosimo -- http://jwcxz.com/ *
   6:tlc.c         ****  *                                  *
   7:tlc.c         ****  * TLC array modification, control  *
   8:tlc.c         ****  ************************************/
   9:tlc.c         **** 
  10:tlc.c         **** #include "tlc.h"
  11:tlc.c         **** 
  12:tlc.c         **** void tlc_init(void) {
  95               		.stabn	68,0,12,.LM0-.LFBB1
  96               	.LM0:
  97               	.LFBB1:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  13:tlc.c         ****     XLAT_DDR  |= _BV(XLAT_PIN);
GAS LISTING /tmp/cc1Hd0nS.s 			page 3


 102               		.stabn	68,0,13,.LM1-.LFBB1
 103               	.LM1:
 104 0000 219A      		sbi 36-0x20,1
  14:tlc.c         ****     XLAT_PRT  &= ~_BV(XLAT_PIN);
 105               		.stabn	68,0,14,.LM2-.LFBB1
 106               	.LM2:
 107 0002 2998      		cbi 37-0x20,1
  15:tlc.c         **** 
  16:tlc.c         ****     BLANK_DDR |= _BV(BLANK_PIN);
 108               		.stabn	68,0,16,.LM3-.LFBB1
 109               	.LM3:
 110 0004 229A      		sbi 36-0x20,2
  17:tlc.c         ****     GSCLK_DDR |= _BV(GSCLK_PIN);
 111               		.stabn	68,0,17,.LM4-.LFBB1
 112               	.LM4:
 113 0006 539A      		sbi 42-0x20,3
  18:tlc.c         **** 
  19:tlc.c         ****     BLANK_PRT |= _BV(BLANK_PIN);
 114               		.stabn	68,0,19,.LM5-.LFBB1
 115               	.LM5:
 116 0008 2A9A      		sbi 37-0x20,2
  20:tlc.c         **** 
  21:tlc.c         ****     // SPI initialization
  22:tlc.c         ****     SDAT_DDR |=  _BV(SDAT_PIN);
 117               		.stabn	68,0,22,.LM6-.LFBB1
 118               	.LM6:
 119 000a 239A      		sbi 36-0x20,3
  23:tlc.c         ****     SCLK_DDR |=  _BV(SCLK_PIN);
 120               		.stabn	68,0,23,.LM7-.LFBB1
 121               	.LM7:
 122 000c 259A      		sbi 36-0x20,5
  24:tlc.c         ****     SDSS_DDR |=  _BV(SDSS_PIN);
 123               		.stabn	68,0,24,.LM8-.LFBB1
 124               	.LM8:
 125 000e 229A      		sbi 36-0x20,2
  25:tlc.c         ****     SCLK_PRT &= ~_BV(SCLK_PIN);
 126               		.stabn	68,0,25,.LM9-.LFBB1
 127               	.LM9:
 128 0010 2D98      		cbi 37-0x20,5
  26:tlc.c         **** 
  27:tlc.c         ****     //SPSR = _BV(SPI2X);            // double speed SPI
  28:tlc.c         ****     SPCR = _BV(SPE) | _BV(MSTR);    // enable spi in master
 129               		.stabn	68,0,28,.LM10-.LFBB1
 130               	.LM10:
 131 0012 80E5      		ldi r24,lo8(80)
 132 0014 8CBD      		out 76-0x20,r24
  29:tlc.c         ****     SPCR |= _BV(SPR1);              // speed register (don't set this too fast)
 133               		.stabn	68,0,29,.LM11-.LFBB1
 134               	.LM11:
 135 0016 8CB5      		in r24,76-0x20
 136 0018 8260      		ori r24,lo8(2)
 137 001a 8CBD      		out 76-0x20,r24
  30:tlc.c         **** 
  31:tlc.c         ****     // BLANK counter hits every 4096 GSCLK cycles
  32:tlc.c         ****     TCCR1A = _BV(COM1B1);
 138               		.stabn	68,0,32,.LM12-.LFBB1
 139               	.LM12:
GAS LISTING /tmp/cc1Hd0nS.s 			page 4


 140 001c 80E2      		ldi r24,lo8(32)
 141 001e 8093 8000 		sts 128,r24
  33:tlc.c         ****     TCCR1B = _BV(WGM13);
 142               		.stabn	68,0,33,.LM13-.LFBB1
 143               	.LM13:
 144 0022 E1E8      		ldi r30,lo8(129)
 145 0024 F0E0      		ldi r31,hi8(129)
 146 0026 80E1      		ldi r24,lo8(16)
 147 0028 8083      		st Z,r24
  34:tlc.c         ****     TCCR1B |= _BV(CS10);
 148               		.stabn	68,0,34,.LM14-.LFBB1
 149               	.LM14:
 150 002a 8081      		ld r24,Z
 151 002c 8160      		ori r24,lo8(1)
 152 002e 8083      		st Z,r24
  35:tlc.c         ****     OCR1A = 1;
 153               		.stabn	68,0,35,.LM15-.LFBB1
 154               	.LM15:
 155 0030 81E0      		ldi r24,lo8(1)
 156 0032 90E0      		ldi r25,hi8(1)
 157 0034 9093 8900 		sts 136+1,r25
 158 0038 8093 8800 		sts 136,r24
  36:tlc.c         ****     OCR1B = 2;
 159               		.stabn	68,0,36,.LM16-.LFBB1
 160               	.LM16:
 161 003c 82E0      		ldi r24,lo8(2)
 162 003e 90E0      		ldi r25,hi8(2)
 163 0040 9093 8B00 		sts 138+1,r25
 164 0044 8093 8A00 		sts 138,r24
  37:tlc.c         ****     ICR1 = 18432; // = (GSCLKPD+1)*4096/2
 165               		.stabn	68,0,37,.LM17-.LFBB1
 166               	.LM17:
 167 0048 80E0      		ldi r24,lo8(18432)
 168 004a 98E4      		ldi r25,hi8(18432)
 169 004c 9093 8700 		sts 134+1,r25
 170 0050 8093 8600 		sts 134,r24
  38:tlc.c         **** 
  39:tlc.c         ****     // GSCLK
  40:tlc.c         ****     TCCR2A = (_BV(COM2B1) | _BV(WGM21) | _BV(WGM20));
 171               		.stabn	68,0,40,.LM18-.LFBB1
 172               	.LM18:
 173 0054 83E2      		ldi r24,lo8(35)
 174 0056 8093 B000 		sts 176,r24
  41:tlc.c         ****     TCCR2B = _BV(WGM22);
 175               		.stabn	68,0,41,.LM19-.LFBB1
 176               	.LM19:
 177 005a E1EB      		ldi r30,lo8(177)
 178 005c F0E0      		ldi r31,hi8(177)
 179 005e 88E0      		ldi r24,lo8(8)
 180 0060 8083      		st Z,r24
  42:tlc.c         ****     TCCR2B |= _BV(CS20);
 181               		.stabn	68,0,42,.LM20-.LFBB1
 182               	.LM20:
 183 0062 8081      		ld r24,Z
 184 0064 8160      		ori r24,lo8(1)
 185 0066 8083      		st Z,r24
  43:tlc.c         ****     OCR2A = 9;
GAS LISTING /tmp/cc1Hd0nS.s 			page 5


 186               		.stabn	68,0,43,.LM21-.LFBB1
 187               	.LM21:
 188 0068 89E0      		ldi r24,lo8(9)
 189 006a 8093 B300 		sts 179,r24
  44:tlc.c         ****     OCR2B = 0;
 190               		.stabn	68,0,44,.LM22-.LFBB1
 191               	.LM22:
 192 006e 1092 B400 		sts 180,__zero_reg__
 193               	/* epilogue start */
  45:tlc.c         **** }
 194               		.stabn	68,0,45,.LM23-.LFBB1
 195               	.LM23:
 196 0072 0895      		ret
 197               		.size	tlc_init, .-tlc_init
 198               	.Lscope1:
 199               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 200               		.stabd	78,0,0
 201               		.stabs	"tlc_drive:F(0,15)",36,0,47,tlc_drive
 202               	.global	tlc_drive
 203               		.type	tlc_drive, @function
 204               	tlc_drive:
 205               		.stabd	46,0,0
  46:tlc.c         **** 
  47:tlc.c         **** void tlc_drive(void) {
 206               		.stabn	68,0,47,.LM24-.LFBB2
 207               	.LM24:
 208               	.LFBB2:
 209               	/* prologue: function */
 210               	/* frame size = 0 */
 211               	/* stack size = 0 */
 212               	.L__stack_usage = 0
 213               		.stabn	68,0,47,.LM25-.LFBB2
 214               	.LM25:
 215 0074 80E0      		ldi r24,lo8(0)
 216 0076 90E0      		ldi r25,hi8(0)
 217               	.L4:
  48:tlc.c         ****     uint8_t out;
  49:tlc.c         **** 
  50:tlc.c         ****     for ( out=0 ; out<24 ; out++ ) {
  51:tlc.c         ****         SPDR = tlc[out];
 218               		.stabn	68,0,51,.LM26-.LFBB2
 219               	.LM26:
 220 0078 FC01      		movw r30,r24
 221 007a E050      		subi r30,lo8(-(tlc))
 222 007c F040      		sbci r31,hi8(-(tlc))
 223 007e 2081      		ld r18,Z
 224 0080 2EBD      		out 78-0x20,r18
 225               	.L3:
  52:tlc.c         ****         while ( !(SPSR & _BV(SPIF)) );
 226               		.stabn	68,0,52,.LM27-.LFBB2
 227               	.LM27:
 228 0082 0DB4      		in __tmp_reg__,77-0x20
 229 0084 07FE      		sbrs __tmp_reg__,7
 230 0086 00C0      		rjmp .L3
 231               		.stabn	68,0,52,.LM28-.LFBB2
 232               	.LM28:
 233 0088 0196      		adiw r24,1
GAS LISTING /tmp/cc1Hd0nS.s 			page 6


  50:tlc.c         ****     for ( out=0 ; out<24 ; out++ ) {
 234               		.stabn	68,0,50,.LM29-.LFBB2
 235               	.LM29:
 236 008a 8831      		cpi r24,24
 237 008c 9105      		cpc r25,__zero_reg__
 238 008e 01F4      		brne .L4
  53:tlc.c         **** 
  54:tlc.c         ****         // this is bitbang mode...  I wouldn't recommend it
  55:tlc.c         ****         /*
  56:tlc.c         ****         for ( val1=8 ; val1>0 ; val1-- ) {
  57:tlc.c         ****             val = val1 - 1;
  58:tlc.c         **** 
  59:tlc.c         ****             _OFF(SCLK_PRT, SCLK_PIN);
  60:tlc.c         ****             _delay_us(SCLKHPD);
  61:tlc.c         ****             if ( ( tlc[out] >> val ) & 1 ) _ON(SDAT_PRT, SDAT_PIN); else _OFF(SDAT_PRT, SDAT_PIN);
  62:tlc.c         ****             _delay_us(SCLKHPD);
  63:tlc.c         ****             _ON(SCLK_PRT, SCLK_PIN);
  64:tlc.c         ****             _delay_us(SCLKPD);
  65:tlc.c         ****         }
  66:tlc.c         ****         // */
  67:tlc.c         ****     }
  68:tlc.c         **** 
  69:tlc.c         ****     // pulse the latch
  70:tlc.c         ****     _ON(XLAT_PRT, XLAT_PIN);
 239               		.stabn	68,0,70,.LM30-.LFBB2
 240               	.LM30:
 241 0090 299A      		sbi 37-0x20,1
 242               	.LBB34:
 243               	.LBB35:
 244               	.LBB36:
 245               	.LBB37:
 246               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext1
 247               	.Ltext1:
   1:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
GAS LISTING /tmp/cc1Hd0nS.s 			page 7


  25:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2143 2010-06-08 21:19:51Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #endif
  43:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \file */
  45:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     \code
  47:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     \endcode
  49:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  50:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  58:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  65:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  67:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** */
  68:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
GAS LISTING /tmp/cc1Hd0nS.s 			page 8


  82:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 248               		.stabn	68,0,83,.LM31-.LFBB2
 249               	.LM31:
 250 0092 86E0      		ldi r24,lo8(6)
 251 0094 982F      		mov r25,r24
 252               	/* #APP */
 253               	 ;  83 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 1
 254 0096 9A95      		1: dec r25
 255 0098 01F4      		brne 1b
 256               	 ;  0 "" 2
 257               	/* #NOAPP */
 258               	.LBE37:
 259               	.LBE36:
 260               	.LBE35:
 261               	.LBE34:
 262               		.stabs	"tlc.c",132,0,0,.Ltext2
 263               	.Ltext2:
  71:tlc.c         ****     _delay_us(XLATPD);
  72:tlc.c         ****     _OFF(XLAT_PRT, XLAT_PIN);
 264               		.stabn	68,0,72,.LM32-.LFBB2
 265               	.LM32:
 266 009a 2998      		cbi 37-0x20,1
 267               	.LBB38:
 268               	.LBB39:
 269               	.LBB40:
 270               	.LBB41:
 271               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext3
 272               	.Ltext3:
 273               		.stabn	68,0,83,.LM33-.LFBB2
 274               	.LM33:
 275               	/* #APP */
 276               	 ;  83 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 1
 277 009c 8A95      		1: dec r24
 278 009e 01F4      		brne 1b
 279               	 ;  0 "" 2
 280               	/* epilogue start */
 281               	/* #NOAPP */
 282               	.LBE41:
 283               	.LBE40:
 284               	.LBE39:
 285               	.LBE38:
 286               		.stabs	"tlc.c",132,0,0,.Ltext4
 287               	.Ltext4:
  73:tlc.c         ****     _delay_us(XLATPD);
  74:tlc.c         **** }
 288               		.stabn	68,0,74,.LM34-.LFBB2
 289               	.LM34:
 290 00a0 0895      		ret
 291               		.size	tlc_drive, .-tlc_drive
 292               	.Lscope2:
 293               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 294               		.stabd	78,0,0
 295               		.stabs	"set:F(0,15)",36,0,77,set
 296               		.stabs	"driver:P(0,16)=*(0,17)=B(5,2)",64,0,77,18
 297               		.stabs	"posn:P(5,2)",64,0,77,22
 298               		.stabs	"value:P(5,4)",64,0,77,26
GAS LISTING /tmp/cc1Hd0nS.s 			page 9


 299               	.global	set
 300               		.type	set, @function
 301               	set:
 302               		.stabd	46,0,0
  75:tlc.c         **** 
  76:tlc.c         **** /* HELPER FUNCTIONS */
  77:tlc.c         **** void set(volatile uint8_t driver[], uint8_t posn, uint16_t value) {
 303               		.stabn	68,0,77,.LM35-.LFBB3
 304               	.LM35:
 305               	.LFBB3:
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 0 */
 309               	.L__stack_usage = 0
 310 00a2 9C01      		movw r18,r24
 311 00a4 DA01      		movw r26,r20
  78:tlc.c         ****     // store data to the packed driver byte array
  79:tlc.c         ****     uint8_t idx;
  80:tlc.c         **** 
  81:tlc.c         ****     if ( posn%2 ) {
 312               		.stabn	68,0,81,.LM36-.LFBB3
 313               	.LM36:
 314 00a6 70E0      		ldi r23,lo8(0)
  82:tlc.c         ****         // for an odd position number, the base index (index of the full byte)
  83:tlc.c         ****         // is (23 - 3*odd/2 - 1)
  84:tlc.c         ****         idx = 22 - ((3*posn)>>1);
 315               		.stabn	68,0,84,.LM37-.LFBB3
 316               	.LM37:
 317 00a8 CB01      		movw r24,r22
 318 00aa 880F      		lsl r24
 319 00ac 991F      		rol r25
 320 00ae 860F      		add r24,r22
 321 00b0 971F      		adc r25,r23
 322 00b2 9595      		asr r25
 323 00b4 8795      		ror r24
  81:tlc.c         ****     if ( posn%2 ) {
 324               		.stabn	68,0,81,.LM38-.LFBB3
 325               	.LM38:
 326 00b6 60FD      		sbrc r22,0
 327 00b8 00C0      		rjmp .L11
  85:tlc.c         ****         driver[idx] = value >> 4;
  86:tlc.c         ****         driver[idx+1] = ( (value & 0x00F) << 4 ) | ( driver[idx+1] & 0x0F );
  87:tlc.c         ****     } else {
  88:tlc.c         ****         // for an even position number, the base index is (23 - 3*even/2)
  89:tlc.c         ****         idx = 23 - ((3*posn)>>1);
 328               		.stabn	68,0,89,.LM39-.LFBB3
 329               	.LM39:
 330 00ba 97E1      		ldi r25,lo8(23)
 331 00bc 981B      		sub r25,r24
  90:tlc.c         ****         driver[idx-1] = ( driver[idx-1] & 0xF0 ) | ( (value >> 8) & 0x00F );
 332               		.stabn	68,0,90,.LM40-.LFBB3
 333               	.LM40:
 334 00be 892F      		mov r24,r25
 335 00c0 90E0      		ldi r25,lo8(0)
 336 00c2 FC01      		movw r30,r24
 337 00c4 3197      		sbiw r30,1
 338 00c6 E20F      		add r30,r18
GAS LISTING /tmp/cc1Hd0nS.s 			page 10


 339 00c8 F31F      		adc r31,r19
 340 00ca 4081      		ld r20,Z
 341 00cc 407F      		andi r20,lo8(-16)
 342 00ce 5B2F      		mov r21,r27
 343 00d0 5F70      		andi r21,lo8(15)
 344 00d2 452B      		or r20,r21
 345 00d4 4083      		st Z,r20
  91:tlc.c         ****         driver[idx] = value;
 346               		.stabn	68,0,91,.LM41-.LFBB3
 347               	.LM41:
 348 00d6 820F      		add r24,r18
 349 00d8 931F      		adc r25,r19
 350 00da FC01      		movw r30,r24
 351 00dc A083      		st Z,r26
 352 00de 0895      		ret
 353               	.L11:
  84:tlc.c         ****         idx = 22 - ((3*posn)>>1);
 354               		.stabn	68,0,84,.LM42-.LFBB3
 355               	.LM42:
 356 00e0 46E1      		ldi r20,lo8(22)
 357 00e2 481B      		sub r20,r24
  85:tlc.c         ****         driver[idx] = value >> 4;
 358               		.stabn	68,0,85,.LM43-.LFBB3
 359               	.LM43:
 360 00e4 50E0      		ldi r21,lo8(0)
 361 00e6 F901      		movw r30,r18
 362 00e8 E40F      		add r30,r20
 363 00ea F51F      		adc r31,r21
 364 00ec CD01      		movw r24,r26
 365 00ee 9295      		swap r25
 366 00f0 8295      		swap r24
 367 00f2 8F70      		andi r24,0x0f
 368 00f4 8927      		eor r24,r25
 369 00f6 9F70      		andi r25,0x0f
 370 00f8 8927      		eor r24,r25
 371 00fa 8083      		st Z,r24
  86:tlc.c         ****         driver[idx+1] = ( (value & 0x00F) << 4 ) | ( driver[idx+1] & 0x0F );
 372               		.stabn	68,0,86,.LM44-.LFBB3
 373               	.LM44:
 374 00fc FA01      		movw r30,r20
 375 00fe 3196      		adiw r30,1
 376 0100 E20F      		add r30,r18
 377 0102 F31F      		adc r31,r19
 378 0104 8081      		ld r24,Z
 379 0106 8F70      		andi r24,lo8(15)
 380 0108 A295      		swap r26
 381 010a A07F      		andi r26,lo8(-16)
 382 010c 8A2B      		or r24,r26
 383 010e 8083      		st Z,r24
 384 0110 0895      		ret
 385               		.size	set, .-set
 386               	.Lscope3:
 387               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 388               		.stabd	78,0,0
 389               		.stabs	"get:F(5,4)",36,0,95,get
 390               		.stabs	"driver:P(0,16)",64,0,95,24
 391               		.stabs	"posn:P(5,2)",64,0,95,22
GAS LISTING /tmp/cc1Hd0nS.s 			page 11


 392               	.global	get
 393               		.type	get, @function
 394               	get:
 395               		.stabd	46,0,0
  92:tlc.c         ****     }
  93:tlc.c         **** }
  94:tlc.c         **** 
  95:tlc.c         **** uint16_t get(volatile uint8_t driver[], uint8_t posn) {
 396               		.stabn	68,0,95,.LM45-.LFBB4
 397               	.LM45:
 398               	.LFBB4:
 399               	/* prologue: function */
 400               	/* frame size = 0 */
 401               	/* stack size = 0 */
 402               	.L__stack_usage = 0
  96:tlc.c         ****     // get the value of a driver from the byte array
  97:tlc.c         ****     uint8_t idx;
  98:tlc.c         **** 
  99:tlc.c         ****     if ( posn%2 ) {
 403               		.stabn	68,0,99,.LM46-.LFBB4
 404               	.LM46:
 405 0112 70E0      		ldi r23,lo8(0)
 100:tlc.c         ****         idx = 22 - ((3*posn)>>1);
 406               		.stabn	68,0,100,.LM47-.LFBB4
 407               	.LM47:
 408 0114 9B01      		movw r18,r22
 409 0116 220F      		lsl r18
 410 0118 331F      		rol r19
 411 011a 260F      		add r18,r22
 412 011c 371F      		adc r19,r23
 413 011e 3595      		asr r19
 414 0120 2795      		ror r18
  99:tlc.c         ****     if ( posn%2 ) {
 415               		.stabn	68,0,99,.LM48-.LFBB4
 416               	.LM48:
 417 0122 60FD      		sbrc r22,0
 418 0124 00C0      		rjmp .L15
 101:tlc.c         ****         return ( ((uint16_t) driver[idx]) << 4 ) | (driver[idx+1] >> 4);
 102:tlc.c         ****     } else {
 103:tlc.c         ****         idx = 23 - ((3*posn)>>1);
 419               		.stabn	68,0,103,.LM49-.LFBB4
 420               	.LM49:
 421 0126 37E1      		ldi r19,lo8(23)
 422 0128 321B      		sub r19,r18
 104:tlc.c         ****         return ( ( (uint16_t) (driver[idx-1]) & 0x0F ) << 8 ) | driver[idx];
 423               		.stabn	68,0,104,.LM50-.LFBB4
 424               	.LM50:
 425 012a 232F      		mov r18,r19
 426 012c 30E0      		ldi r19,lo8(0)
 427 012e F901      		movw r30,r18
 428 0130 3197      		sbiw r30,1
 429 0132 E80F      		add r30,r24
 430 0134 F91F      		adc r31,r25
 431 0136 4081      		ld r20,Z
 432 0138 280F      		add r18,r24
 433 013a 391F      		adc r19,r25
 434 013c F901      		movw r30,r18
GAS LISTING /tmp/cc1Hd0nS.s 			page 12


 435 013e 2081      		ld r18,Z
 436 0140 842F      		mov r24,r20
 437 0142 90E0      		ldi r25,lo8(0)
 438 0144 8F70      		andi r24,lo8(15)
 439 0146 9070      		andi r25,hi8(15)
 440 0148 982F      		mov r25,r24
 441 014a 8827      		clr r24
 442 014c 30E0      		ldi r19,lo8(0)
 443 014e 822B      		or r24,r18
 444 0150 932B      		or r25,r19
 105:tlc.c         ****     }
 106:tlc.c         **** 
 107:tlc.c         **** }
 445               		.stabn	68,0,107,.LM51-.LFBB4
 446               	.LM51:
 447 0152 0895      		ret
 448               	.L15:
 100:tlc.c         ****         idx = 22 - ((3*posn)>>1);
 449               		.stabn	68,0,100,.LM52-.LFBB4
 450               	.LM52:
 451 0154 E6E1      		ldi r30,lo8(22)
 452 0156 E21B      		sub r30,r18
 101:tlc.c         ****         return ( ((uint16_t) driver[idx]) << 4 ) | (driver[idx+1] >> 4);
 453               		.stabn	68,0,101,.LM53-.LFBB4
 454               	.LM53:
 455 0158 F0E0      		ldi r31,lo8(0)
 456 015a DC01      		movw r26,r24
 457 015c AE0F      		add r26,r30
 458 015e BF1F      		adc r27,r31
 459 0160 2C91      		ld r18,X
 460 0162 3196      		adiw r30,1
 461 0164 E80F      		add r30,r24
 462 0166 F91F      		adc r31,r25
 463 0168 8081      		ld r24,Z
 464 016a 8295      		swap r24
 465 016c 8F70      		andi r24,lo8(15)
 466 016e 90E0      		ldi r25,lo8(0)
 467 0170 30E0      		ldi r19,lo8(0)
 468 0172 2295      		swap r18
 469 0174 3295      		swap r19
 470 0176 307F      		andi r19,0xf0
 471 0178 3227      		eor r19,r18
 472 017a 207F      		andi r18,0xf0
 473 017c 3227      		eor r19,r18
 474 017e 822B      		or r24,r18
 475 0180 932B      		or r25,r19
 476 0182 0895      		ret
 477               		.size	get, .-get
 478               	.Lscope4:
 479               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 480               		.stabd	78,0,0
 481               		.stabs	"ser2led:F(5,4)",36,0,111,ser2led
 482               		.stabs	"ser:P(5,2)",64,0,111,24
 483               	.global	ser2led
 484               		.type	ser2led, @function
 485               	ser2led:
 486               		.stabd	46,0,0
GAS LISTING /tmp/cc1Hd0nS.s 			page 13


 108:tlc.c         **** 
 109:tlc.c         **** // convert 8-bit serial input data into a 12-bit output for the TLC
 110:tlc.c         **** // and try to preserve the full range of the TLC's control
 111:tlc.c         **** uint16_t ser2led(uint8_t ser) {
 487               		.stabn	68,0,111,.LM54-.LFBB5
 488               	.LM54:
 489               	.LFBB5:
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 492               	/* stack size = 0 */
 493               	.L__stack_usage = 0
 112:tlc.c         ****     return (((uint16_t) ser) << 4) | (ser >> 4);
 494               		.stabn	68,0,112,.LM55-.LFBB5
 495               	.LM55:
 496 0184 282F      		mov r18,r24
 497 0186 2295      		swap r18
 498 0188 2F70      		andi r18,lo8(15)
 499 018a 30E0      		ldi r19,lo8(0)
 500 018c 90E0      		ldi r25,lo8(0)
 501 018e 8295      		swap r24
 502 0190 9295      		swap r25
 503 0192 907F      		andi r25,0xf0
 504 0194 9827      		eor r25,r24
 505 0196 807F      		andi r24,0xf0
 506 0198 9827      		eor r25,r24
 507 019a 282B      		or r18,r24
 508 019c 392B      		or r19,r25
 113:tlc.c         **** }
 509               		.stabn	68,0,113,.LM56-.LFBB5
 510               	.LM56:
 511 019e C901      		movw r24,r18
 512               	/* epilogue start */
 513 01a0 0895      		ret
 514               		.size	ser2led, .-ser2led
 515               	.Lscope5:
 516               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 517               		.stabd	78,0,0
 518               		.stabs	"",100,0,0,.Letext0
 519               	.Letext0:
GAS LISTING /tmp/cc1Hd0nS.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tlc.c
     /tmp/cc1Hd0nS.s:2      *ABS*:000000000000003f __SREG__
     /tmp/cc1Hd0nS.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/cc1Hd0nS.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/cc1Hd0nS.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1Hd0nS.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1Hd0nS.s:93     .text:0000000000000000 tlc_init
     /tmp/cc1Hd0nS.s:204    .text:0000000000000074 tlc_drive
     /tmp/cc1Hd0nS.s:301    .text:00000000000000a2 set
     /tmp/cc1Hd0nS.s:394    .text:0000000000000112 get
     /tmp/cc1Hd0nS.s:485    .text:0000000000000184 ser2led

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
tlc
