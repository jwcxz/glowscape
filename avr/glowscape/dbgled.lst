GAS LISTING /tmp/cckWwGrL.s 			page 1


   1               		.file	"dbgled.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.stabs	"/home/j/projects/glowscape/avr/glowscape/",100,0,2,.Ltext0
  10               		.stabs	"dbgled.c",100,0,2,.Ltext0
  11               		.text
  12               	.Ltext0:
  13               		.stabs	"gcc2_compiled.",60,0,0,0
  14               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  15               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  16               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  17               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  18               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  19               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  20               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"void:t(0,15)=(0,15)",128,0,0,0
  29               		.stabs	"dbgled.h",130,0,0,0
  30               		.stabs	"main.h",130,0,0,0
  31               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/inttypes.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.6.2/include/stdint.h",130,0,0,0
  33               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h",130,0,0,0
  34               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  35               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  36               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  37               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  38               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  39               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  40               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  41               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  42               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  43               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  44               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  45               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  46               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  47               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  48               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  49               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  50               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  51               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  52               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  53               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  54               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  55               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  56               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  57               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
GAS LISTING /tmp/cckWwGrL.s 			page 2


  58               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  59               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  60               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  61               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  62               		.stabn	162,0,0,0
  63               		.stabn	162,0,0,0
  64               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  65               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h",130,0,0,0
  68               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/avr/fuse.h",130,0,0,0
  69               		.stabs	"__fuse_t:t(7,1)=(7,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
  70               		.stabn	162,0,0,0
  71               		.stabn	162,0,0,0
  72               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/avr/pgmspace.h",130,0,0,0
  73               		.stabs	"/usr/lib/gcc/avr/4.6.2/include/stddef.h",130,0,0,0
  74               		.stabs	"size_t:t(9,1)=(0,4)",128,0,212,0
  75               		.stabn	162,0,0,0
  76               		.stabs	"prog_void:t(8,1)=(8,2)=(8,2)",128,0,217,0
  77               		.stabs	"prog_char:t(8,3)=(8,4)=@s8;r(8,4);0;255;",128,0,218,0
  78               		.stabs	"prog_uchar:t(8,5)=(8,6)=@s8;r(8,6);0;255;",128,0,219,0
  79               		.stabs	"prog_int8_t:t(8,7)=(8,8)=(0,10)",128,0,221,0
  80               		.stabs	"prog_uint8_t:t(8,9)=(8,10)=(0,11)",128,0,222,0
  81               		.stabs	"prog_int16_t:t(8,11)=(8,12)=(0,1)",128,0,223,0
  82               		.stabs	"prog_uint16_t:t(8,13)=(8,14)=(0,4)",128,0,224,0
  83               		.stabs	"prog_int32_t:t(8,15)=(8,16)=(0,3)",128,0,225,0
  84               		.stabs	"prog_uint32_t:t(8,17)=(8,18)=(0,5)",128,0,226,0
  85               		.stabs	"prog_int64_t:t(8,19)=(8,20)=(0,6)",128,0,228,0
  86               		.stabs	"prog_uint64_t:t(8,21)=(8,22)=(0,7)",128,0,229,0
  87               		.stabn	162,0,0,0
  88               		.stabn	162,0,0,0
  89               		.stabn	162,0,0,0
  90               		.stabs	"show_addr:F(0,15)",36,0,12,show_addr
  91               	.global	show_addr
  92               		.type	show_addr, @function
  93               	show_addr:
  94               		.stabd	46,0,0
   1:dbgled.c      **** /* A C R I S   P R O J E C T ********
   2:dbgled.c      ****  * LED Controller                   *
   3:dbgled.c      ****  * http://jwcxz.com/projects/acris  *
   4:dbgled.c      ****  *                                  *
   5:dbgled.c      ****  * J. Colosimo -- http://jwcxz.com/ *
   6:dbgled.c      ****  *                                  *
   7:dbgled.c      ****  * debug LED control                *
   8:dbgled.c      ****  ************************************/
   9:dbgled.c      **** 
  10:dbgled.c      **** #include "dbgled.h"
  11:dbgled.c      **** 
  12:dbgled.c      **** void show_addr(void) {
  95               		.stabn	68,0,12,.LM0-.LFBB1
  96               	.LM0:
  97               	.LFBB1:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  13:dbgled.c      ****     dbg_set(instaddr >> 4);
GAS LISTING /tmp/cckWwGrL.s 			page 3


 102               		.stabn	68,0,13,.LM1-.LFBB1
 103               	.LM1:
 104 0000 4091 0000 		lds r20,instaddr
 105               	.LBB22:
 106               	.LBB23:
  14:dbgled.c      ****     _delay_ms(500);
  15:dbgled.c      ****     dbg_set(instaddr & 0x0F);
  16:dbgled.c      ****     _delay_ms(500);
  17:dbgled.c      **** }
  18:dbgled.c      **** 
  19:dbgled.c      **** void dbg_set(uint8_t val) {
  20:dbgled.c      ****     uint8_t tmp = val & 0xF;
 107               		.stabn	68,0,20,.LM2-.LFBB1
 108               	.LM2:
 109 0004 942F      		mov r25,r20
 110 0006 9295      		swap r25
 111 0008 9F70      		andi r25,lo8(15)
  21:dbgled.c      ****     DBGLED_PRT |= tmp;
 112               		.stabn	68,0,21,.LM3-.LFBB1
 113               	.LM3:
 114 000a 28B1      		in r18,40-0x20
 115 000c 292B      		or r18,r25
 116 000e 28B9      		out 40-0x20,r18
  22:dbgled.c      ****     DBGLED_PRT &= 0xF0 | tmp;
 117               		.stabn	68,0,22,.LM4-.LFBB1
 118               	.LM4:
 119 0010 88B1      		in r24,40-0x20
 120 0012 906F      		ori r25,lo8(-16)
 121 0014 9823      		and r25,r24
 122 0016 98B9      		out 40-0x20,r25
 123 0018 88E8      		ldi r24,lo8(5000)
 124 001a 93E1      		ldi r25,hi8(5000)
 125               	.LBE23:
 126               	.LBE22:
 127               	.LBB24:
 128               	.LBB25:
 129               	.LBB26:
 130               	.LBB27:
 131               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext1
 132               	.Ltext1:
   1:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
GAS LISTING /tmp/cckWwGrL.s 			page 4


  18:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2143 2010-06-08 21:19:51Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** #endif
  43:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \file */
  45:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     \code
  47:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     \endcode
  49:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  50:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  58:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  65:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  67:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** */
  68:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
GAS LISTING /tmp/cckWwGrL.s 			page 5


  75:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 	);
  89:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** }
  90:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  91:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  93:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 
  99:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h ****  */
 102:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** void
 103:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** {
 105:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 133               		.stabn	68,0,105,.LM5-.LFBB1
 134               	.LM5:
 135 001c 24EF      		ldi r18,lo8(500)
 136 001e 31E0      		ldi r19,hi8(500)
 137               	.L2:
 138 0020 F901      		movw r30,r18
 139               	/* #APP */
 140               	 ;  105 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 1
 141 0022 3197      		1: sbiw r30,1
 142 0024 01F4      		brne 1b
 143               	 ;  0 "" 2
 144               	/* #NOAPP */
 145 0026 0197      		sbiw r24,1
 146               	.LBE27:
 147               	.LBE26:
 148               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h",132,0,0,.Ltext2
 149               	.Ltext2:
   1:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
GAS LISTING /tmp/cckWwGrL.s 			page 6


  10:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2189 2010-10-13 09:39:34Z aboyapati $ */
  34:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 0
  40:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  45:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \file */
  46:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  47:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \code
  48:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  49:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  50:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  51:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \endcode
  52:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  53:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  54:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  55:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  56:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     used.
  57:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  58:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  59:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  60:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  61:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  62:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  63:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  64:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  65:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  66:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
GAS LISTING /tmp/cckWwGrL.s 			page 7


  67:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  68:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  69:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  70:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  71:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  72:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  73:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  74:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     routines linked into the application.
  75:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  76:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  77:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  78:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  79:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  80:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** */
  81:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  82:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  83:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  84:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  86:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  87:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  88:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  89:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  90:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  91:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  92:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  93:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  94:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  95:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  96:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  97:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /**
  98:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    \ingroup util_delay
  99:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 100:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 101:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 102:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 103:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 104:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 105:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 106:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 108:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 109:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 110:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 111:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 112:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 113:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 114:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 115:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 116:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 117:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 118:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 119:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 120:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 121:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 122:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 123:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
GAS LISTING /tmp/cckWwGrL.s 			page 8


 124:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 126:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 127:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay
 128:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    although this will be deprecated in future.
 129:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 130:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****  */
 131:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** void
 132:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 133:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** {
 134:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 135:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 136:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 137:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 138:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 139:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 140:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 141:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 142:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 143:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 144:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 145:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 146:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 147:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#else
 148:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		//round up by default
 149:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 150:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#endif
 151:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 152:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 153:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 154:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BAC
 155:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 156:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 157:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks = 1;
 158:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 159:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	{
 160:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 161:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 162:/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		while(__ticks)
 150               		.stabn	68,0,162,.LM6-.LFBB1
 151               	.LM6:
 152 0028 01F4      		brne .L2
 153               	.LBE25:
 154               	.LBE24:
 155               		.stabs	"dbgled.c",132,0,0,.Ltext3
 156               	.Ltext3:
  15:dbgled.c      ****     dbg_set(instaddr & 0x0F);
 157               		.stabn	68,0,15,.LM7-.LFBB1
 158               	.LM7:
 159 002a 842F      		mov r24,r20
 160 002c 8F70      		andi r24,lo8(15)
 161               	.LBB28:
 162               	.LBB29:
  21:dbgled.c      ****     DBGLED_PRT |= tmp;
 163               		.stabn	68,0,21,.LM8-.LFBB1
 164               	.LM8:
 165 002e 98B1      		in r25,40-0x20
GAS LISTING /tmp/cckWwGrL.s 			page 9


 166 0030 982B      		or r25,r24
 167 0032 98B9      		out 40-0x20,r25
 168               		.stabn	68,0,22,.LM9-.LFBB1
 169               	.LM9:
 170 0034 98B1      		in r25,40-0x20
 171 0036 806F      		ori r24,lo8(-16)
 172 0038 8923      		and r24,r25
 173 003a 88B9      		out 40-0x20,r24
 174 003c 88E8      		ldi r24,lo8(5000)
 175 003e 93E1      		ldi r25,hi8(5000)
 176               	.LBE29:
 177               	.LBE28:
 178               	.LBB30:
 179               	.LBB31:
 180               	.LBB32:
 181               	.LBB33:
 182               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext4
 183               	.Ltext4:
 184               		.stabn	68,0,105,.LM10-.LFBB1
 185               	.LM10:
 186 0040 24EF      		ldi r18,lo8(500)
 187 0042 31E0      		ldi r19,hi8(500)
 188               	.L3:
 189 0044 F901      		movw r30,r18
 190               	/* #APP */
 191               	 ;  105 "/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 1
 192 0046 3197      		1: sbiw r30,1
 193 0048 01F4      		brne 1b
 194               	 ;  0 "" 2
 195               	/* #NOAPP */
 196 004a 0197      		sbiw r24,1
 197               	.LBE33:
 198               	.LBE32:
 199               		.stabs	"/usr/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h",132,0,0,.Ltext5
 200               	.Ltext5:
 201               		.stabn	68,0,162,.LM11-.LFBB1
 202               	.LM11:
 203 004c 01F4      		brne .L3
 204               	/* epilogue start */
 205               	.LBE31:
 206               	.LBE30:
 207               		.stabs	"dbgled.c",132,0,0,.Ltext6
 208               	.Ltext6:
  17:dbgled.c      **** }
 209               		.stabn	68,0,17,.LM12-.LFBB1
 210               	.LM12:
 211 004e 0895      		ret
 212               		.size	show_addr, .-show_addr
 213               		.stabs	"tmp:r(5,2)",64,0,20,25
 214               		.stabn	192,0,0,.LBB23-.LFBB1
 215               		.stabn	224,0,0,.LBE23-.LFBB1
 216               		.stabs	"tmp:r(5,2)",64,0,20,24
 217               		.stabn	192,0,0,.LBB29-.LFBB1
 218               		.stabn	224,0,0,.LBE29-.LFBB1
 219               	.Lscope1:
 220               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 221               		.stabd	78,0,0
GAS LISTING /tmp/cckWwGrL.s 			page 10


 222               		.stabs	"dbg_set:F(0,15)",36,0,19,dbg_set
 223               		.stabs	"val:P(5,2)",64,0,19,24
 224               	.global	dbg_set
 225               		.type	dbg_set, @function
 226               	dbg_set:
 227               		.stabd	46,0,0
  19:dbgled.c      **** void dbg_set(uint8_t val) {
 228               		.stabn	68,0,19,.LM13-.LFBB2
 229               	.LM13:
 230               	.LFBB2:
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 0 */
 234               	.L__stack_usage = 0
  20:dbgled.c      ****     uint8_t tmp = val & 0xF;
 235               		.stabn	68,0,20,.LM14-.LFBB2
 236               	.LM14:
 237 0050 8F70      		andi r24,lo8(15)
  21:dbgled.c      ****     DBGLED_PRT |= tmp;
 238               		.stabn	68,0,21,.LM15-.LFBB2
 239               	.LM15:
 240 0052 98B1      		in r25,40-0x20
 241 0054 982B      		or r25,r24
 242 0056 98B9      		out 40-0x20,r25
 243               		.stabn	68,0,22,.LM16-.LFBB2
 244               	.LM16:
 245 0058 98B1      		in r25,40-0x20
 246 005a 806F      		ori r24,lo8(-16)
 247 005c 8923      		and r24,r25
 248 005e 88B9      		out 40-0x20,r24
 249               	/* epilogue start */
  23:dbgled.c      **** }
 250               		.stabn	68,0,23,.LM17-.LFBB2
 251               	.LM17:
 252 0060 0895      		ret
 253               		.size	dbg_set, .-dbg_set
 254               		.stabs	"tmp:r(5,2)",64,0,20,24
 255               		.stabn	192,0,0,.LFBB2-.LFBB2
 256               		.stabn	224,0,0,.Lscope2-.LFBB2
 257               	.Lscope2:
 258               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 259               		.stabd	78,0,0
 260               		.stabs	"dbg_on:F(0,15)",36,0,25,dbg_on
 261               		.stabs	"val:P(5,2)",64,0,25,24
 262               	.global	dbg_on
 263               		.type	dbg_on, @function
 264               	dbg_on:
 265               		.stabd	46,0,0
  24:dbgled.c      **** 
  25:dbgled.c      **** void dbg_on(uint8_t val) {
 266               		.stabn	68,0,25,.LM18-.LFBB3
 267               	.LM18:
 268               	.LFBB3:
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 0 */
 272               	.L__stack_usage = 0
GAS LISTING /tmp/cckWwGrL.s 			page 11


  26:dbgled.c      ****     _ON(DBGLED_PRT, val);
 273               		.stabn	68,0,26,.LM19-.LFBB3
 274               	.LM19:
 275 0062 98B1      		in r25,40-0x20
 276 0064 21E0      		ldi r18,lo8(1)
 277 0066 30E0      		ldi r19,hi8(1)
 278 0068 00C0      		rjmp 2f
 279 006a 220F      	1:	lsl r18
 280 006c 331F      		rol r19
 281 006e 8A95      	2:	dec r24
 282 0070 02F4      		brpl 1b
 283 0072 922B      		or r25,r18
 284 0074 98B9      		out 40-0x20,r25
 285               	/* epilogue start */
  27:dbgled.c      **** }
 286               		.stabn	68,0,27,.LM20-.LFBB3
 287               	.LM20:
 288 0076 0895      		ret
 289               		.size	dbg_on, .-dbg_on
 290               	.Lscope3:
 291               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 292               		.stabd	78,0,0
 293               		.stabs	"dbg_off:F(0,15)",36,0,29,dbg_off
 294               		.stabs	"val:P(5,2)",64,0,29,24
 295               	.global	dbg_off
 296               		.type	dbg_off, @function
 297               	dbg_off:
 298               		.stabd	46,0,0
  28:dbgled.c      **** 
  29:dbgled.c      **** void dbg_off(uint8_t val) {
 299               		.stabn	68,0,29,.LM21-.LFBB4
 300               	.LM21:
 301               	.LFBB4:
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 0 */
 305               	.L__stack_usage = 0
  30:dbgled.c      ****     _OFF(DBGLED_PRT, val);
 306               		.stabn	68,0,30,.LM22-.LFBB4
 307               	.LM22:
 308 0078 98B1      		in r25,40-0x20
 309 007a 21E0      		ldi r18,lo8(1)
 310 007c 30E0      		ldi r19,hi8(1)
 311 007e 00C0      		rjmp 2f
 312 0080 220F      	1:	lsl r18
 313 0082 331F      		rol r19
 314 0084 8A95      	2:	dec r24
 315 0086 02F4      		brpl 1b
 316 0088 2095      		com r18
 317 008a 2923      		and r18,r25
 318 008c 28B9      		out 40-0x20,r18
 319               	/* epilogue start */
  31:dbgled.c      **** }
 320               		.stabn	68,0,31,.LM23-.LFBB4
 321               	.LM23:
 322 008e 0895      		ret
 323               		.size	dbg_off, .-dbg_off
GAS LISTING /tmp/cckWwGrL.s 			page 12


 324               	.Lscope4:
 325               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 326               		.stabd	78,0,0
 327               		.stabs	"dbg_init:F(0,15)",36,0,33,dbg_init
 328               	.global	dbg_init
 329               		.type	dbg_init, @function
 330               	dbg_init:
 331               		.stabd	46,0,0
  32:dbgled.c      **** 
  33:dbgled.c      **** void dbg_init(void) {
 332               		.stabn	68,0,33,.LM24-.LFBB5
 333               	.LM24:
 334               	.LFBB5:
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
  34:dbgled.c      ****     // this requires the debug bank to be the bottom 4 bits of a bank
  35:dbgled.c      ****     // TODO: make it more advanced
  36:dbgled.c      ****     DBGLED_DDR |= 0x0F;
 339               		.stabn	68,0,36,.LM25-.LFBB5
 340               	.LM25:
 341 0090 87B1      		in r24,39-0x20
 342 0092 8F60      		ori r24,lo8(15)
 343 0094 87B9      		out 39-0x20,r24
  37:dbgled.c      ****     DBGLED_PRT &= 0xF0; // clear leds
 344               		.stabn	68,0,37,.LM26-.LFBB5
 345               	.LM26:
 346 0096 88B1      		in r24,40-0x20
 347 0098 807F      		andi r24,lo8(-16)
 348 009a 88B9      		out 40-0x20,r24
 349               	/* epilogue start */
  38:dbgled.c      **** }
 350               		.stabn	68,0,38,.LM27-.LFBB5
 351               	.LM27:
 352 009c 0895      		ret
 353               		.size	dbg_init, .-dbg_init
 354               	.Lscope5:
 355               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 356               		.stabd	78,0,0
 357               		.stabs	"",100,0,0,.Letext0
 358               	.Letext0:
GAS LISTING /tmp/cckWwGrL.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 dbgled.c
     /tmp/cckWwGrL.s:2      *ABS*:000000000000003f __SREG__
     /tmp/cckWwGrL.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/cckWwGrL.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/cckWwGrL.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckWwGrL.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckWwGrL.s:93     .text:0000000000000000 show_addr
     /tmp/cckWwGrL.s:226    .text:0000000000000050 dbg_set
     /tmp/cckWwGrL.s:264    .text:0000000000000062 dbg_on
     /tmp/cckWwGrL.s:297    .text:0000000000000078 dbg_off
     /tmp/cckWwGrL.s:330    .text:0000000000000090 dbg_init

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
instaddr
