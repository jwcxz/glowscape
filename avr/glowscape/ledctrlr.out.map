Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o (exit)
/usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_byte_atmega168p.o)
                              eeprom.o (__eerd_byte_m168p)
/usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_word_atmega168p.o)
                              eeprom.o (__eerd_word_m168p)
/usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_block_atmega168p.o)
                              /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_word_atmega168p.o) (__eerd_blraw_m168p)

Allocating common symbols
Common symbol       size              file

args                0x10              main.o
tlc                 0x18              main.o
numargs             0x1               main.o
action              0x1               main.o
uart_rxbuf          0x80              main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
LOAD /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libm.a
LOAD main.o
LOAD dbgled.o
LOAD eeprom.o
LOAD led.o
LOAD tlc.o
LOAD uart.o
LOAD /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x5f8
 *(.vectors)
 .vectors       0x0000000000000000       0x68 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000068                . = ALIGN (0x2)
                0x0000000000000068                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000068        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000068                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000068                __ctors_start = .
 *(.ctors)
                0x0000000000000068                __ctors_end = .
                0x0000000000000068                __dtors_start = .
 *(.dtors)
                0x0000000000000068                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000068        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
                0x0000000000000068                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000068        0xc /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000074       0x16 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000074                __do_copy_data
 .init4         0x000000000000008a       0x10 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_clear_bss.o)
                0x000000000000008a                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000009a        0x8 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
 *(.init9)
 *(.text)
 .text          0x00000000000000a2        0x4 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
                0x00000000000000a2                __vector_22
                0x00000000000000a2                __vector_1
                0x00000000000000a2                __vector_24
                0x00000000000000a2                __vector_12
                0x00000000000000a2                __bad_interrupt
                0x00000000000000a2                __vector_6
                0x00000000000000a2                __vector_3
                0x00000000000000a2                __vector_23
                0x00000000000000a2                __vector_25
                0x00000000000000a2                __vector_11
                0x00000000000000a2                __vector_13
                0x00000000000000a2                __vector_17
                0x00000000000000a2                __vector_19
                0x00000000000000a2                __vector_7
                0x00000000000000a2                __vector_5
                0x00000000000000a2                __vector_4
                0x00000000000000a2                __vector_9
                0x00000000000000a2                __vector_2
                0x00000000000000a2                __vector_21
                0x00000000000000a2                __vector_15
                0x00000000000000a2                __vector_8
                0x00000000000000a2                __vector_14
                0x00000000000000a2                __vector_10
                0x00000000000000a2                __vector_16
                0x00000000000000a2                __vector_20
 .text          0x00000000000000a6       0xb4 main.o
                0x00000000000000a6                receive_data
 .text          0x000000000000015a       0x9e dbgled.o
                0x000000000000015a                show_addr
                0x00000000000001aa                dbg_set
                0x00000000000001bc                dbg_on
                0x00000000000001d2                dbg_off
                0x00000000000001ea                dbg_init
 .text          0x00000000000001f8       0x42 eeprom.o
                0x00000000000001f8                get_addr
                0x0000000000000206                get_baud
                0x0000000000000222                get_baud_dbl
 .text          0x000000000000023a       0x36 led.o
                0x000000000000023a                led_set
                0x0000000000000266                led_action
 .text          0x0000000000000270      0x1a2 tlc.o
                0x0000000000000270                tlc_init
                0x00000000000002e4                tlc_drive
                0x0000000000000312                set
                0x0000000000000382                get
                0x00000000000003f4                ser2led
 .text          0x0000000000000412      0x134 uart.o
                0x0000000000000412                uart_init
                0x000000000000045a                uart_rx
                0x0000000000000498                uart_data_rdy
                0x000000000000049e                __vector_18
 .text          0x0000000000000546        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000546        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_copy_data.o)
 .text          0x0000000000000546        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_clear_bss.o)
 .text          0x0000000000000546        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_byte_atmega168p.o)
 .text          0x0000000000000546        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_word_atmega168p.o)
 .text          0x0000000000000546        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_block_atmega168p.o)
                0x0000000000000546                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000000546       0x72 main.o
                0x0000000000000546                main
 .text.libgcc   0x00000000000005b8        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000005b8        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000005b8        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x00000000000005b8       0x10 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_byte_atmega168p.o)
                0x00000000000005b8                __eerd_byte_m168p
 .text.avr-libc
                0x00000000000005c8        0xc /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_word_atmega168p.o)
                0x00000000000005c8                __eerd_word_m168p
 .text.avr-libc
                0x00000000000005d4       0x20 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_block_atmega168p.o)
                0x00000000000005d4                __eerd_block_m168p
                0x00000000000005d8                __eerd_blraw_m168p
                0x00000000000005f4                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000005f4        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
                0x00000000000005f4                exit
                0x00000000000005f4                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000005f4        0x4 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000005f8                _etext = .

.data           0x0000000000800100        0x6 load address 0x00000000000005f8
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
 .data          0x0000000000800100        0x6 main.o
                0x0000000000800100                argptr
                0x0000000000800102                uart_rxbuf_optr
                0x0000000000800104                uart_rxbuf_iptr
 .data          0x0000000000800106        0x0 dbgled.o
 .data          0x0000000000800106        0x0 eeprom.o
 .data          0x0000000000800106        0x0 led.o
 .data          0x0000000000800106        0x0 tlc.o
 .data          0x0000000000800106        0x0 uart.o
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_clear_bss.o)
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_byte_atmega168p.o)
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_word_atmega168p.o)
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_block_atmega168p.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800106                . = ALIGN (0x2)
                0x0000000000800106                _edata = .
                0x0000000000800106                PROVIDE (__data_end, .)

.bss            0x0000000000800106       0xae
                0x0000000000800106                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
 .bss           0x0000000000800106        0x4 main.o
                0x0000000000800106                instaddr
                0x0000000000800107                rxen
                0x0000000000800108                uart_rxbuf_count
 .bss           0x000000000080010a        0x0 dbgled.o
 .bss           0x000000000080010a        0x0 eeprom.o
 .bss           0x000000000080010a        0x0 led.o
 .bss           0x000000000080010a        0x0 tlc.o
 .bss           0x000000000080010a        0x0 uart.o
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_copy_data.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_clear_bss.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_byte_atmega168p.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_word_atmega168p.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_block_atmega168p.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x000000000080010a       0xaa main.o
                0x000000000080010a                args
                0x000000000080011a                tlc
                0x0000000000800132                numargs
                0x0000000000800133                action
                0x0000000000800134                uart_rxbuf
                0x00000000008001b4                PROVIDE (__bss_end, .)
                0x00000000000005f8                __data_load_start = LOADADDR (.data)
                0x00000000000005fe                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00000000008001b4        0x0
                0x00000000008001b4                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00000000008001b4                PROVIDE (__noinit_end, .)
                0x00000000008001b4                _end = .
                0x00000000008001b4                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x2544
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o
 .stab          0x00000000000006cc      0x750 main.o
                                        0x75c (size before relaxing)
 .stab          0x0000000000000e1c      0x474 dbgled.o
                                        0x6e4 (size before relaxing)
 .stab          0x0000000000001290      0x324 eeprom.o
                                        0x5c4 (size before relaxing)
 .stab          0x00000000000015b4      0x24c led.o
                                        0x4bc (size before relaxing)
 .stab          0x0000000000001800      0x570 tlc.o
                                        0x7e0 (size before relaxing)
 .stab          0x0000000000001d70      0x468 uart.o
                                        0x714 (size before relaxing)
 .stab          0x00000000000021d8       0x54 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_exit.o)
                                         0x60 (size before relaxing)
 .stab          0x000000000000222c       0x9c /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_copy_data.o)
                                         0xa8 (size before relaxing)
 .stab          0x00000000000022c8       0x78 /usr/lib/gcc/avr/4.6.2/avr5/libgcc.a(_clear_bss.o)
                                         0x84 (size before relaxing)
 .stab          0x0000000000002340       0x90 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_byte_atmega168p.o)
                                         0x9c (size before relaxing)
 .stab          0x00000000000023d0       0x6c /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_word_atmega168p.o)
                                         0x78 (size before relaxing)
 .stab          0x000000000000243c      0x108 /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/libc.a(eerd_block_atmega168p.o)
                                        0x114 (size before relaxing)

.stabstr        0x0000000000000000      0xe9c
 *(.stabstr)
 .stabstr       0x0000000000000000      0xe9c /usr/lib/gcc/avr/4.6.2/../../../../avr/lib/avr5/crtm168p.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ledctrlr.out elf32-avr)
LOAD linker stubs
